{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Pattern","id":"Pattern","comment":"\nAn interface for basic searches within strings.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"kind":"method","name":"allMatches","id":"allMatches1()","comment":"\nMatch this pattern against the string repeatedly.\n\nThe iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.\n\nThe matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.\n\nIf the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"24"},{"returnType":{"name":"Match","refId":"dart.core/Match"},"kind":"method","name":"matchAsPrefix","id":"matchAsPrefix2()","comment":"\nMatch this pattern against the start of string.\n\nIf [start] is provided, it must be an integer in the range `0` ..\n`string.length`. In that case, this patten is tested against the\nstring at the [start] position. That is, a match is returned if the\npattern can match a part of the string starting from position [start].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"34"}],"uri":"file:///Users/Cedric/Desktop/dart-sdk/lib/core/pattern.dart","line":"10"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///Users/Cedric/Desktop/dart-sdk/lib/core/object.dart","line":"21"}],"uri":"file:///Users/Cedric/Desktop/dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"file:///repo/akismet.dart/packages/route/url_pattern.dart","id":"route.url_pattern","children":[{"returnType":{"name":"UrlPattern","refId":"route.url_pattern/UrlPattern"},"kind":"method","name":"urlPattern","id":"urlPattern1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"p","id":"p"}],"line":"12"},{"isFinal":true,"kind":"variable","name":"_specialChars","id":"_specialChars","isPrivate":true,"line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Pattern","refId":"dart.core/Pattern"}],"kind":"class","name":"UrlPattern","id":"UrlPattern","comment":"\nA pattern, similar to a [RegExp], that is designed to match against URL\npaths, easily return groups of a matched path, and produce paths from a list\nof arguments - this is they are \"reversible\".\n\n`UrlPattern`s also allow for handling plain paths and URLs with a fragment in\na uniform way so that they can be used for client side routing on browsers\nthat support `window.history.pushState` as well as legacy browsers.\n\nThe differences from a plain [RegExp]:\n * All non-literals must be in a group. Everything outside of a groups is\n   considered a literal and special regex characters are escaped.\n * There can only be one match, and it must match the entire string. `^` and\n   `$` are automatically added to the beginning and end of the pattern,\n   respectively.\n * The pattern must be un-ambiguous, eg `(.*)(.*)` is not allowed at the\n   top-level.\n * The hash character (#) matches both '#' and '/', and it is only allowed\n   once per pattern. Hashes are not allowed inside groups.\n\nWith those differences, `UrlPatterns` become much more useful for routing\nURLs and constructing them, both on the client and server. The best practice\nis to define your application's set of URLs in a shared library.\n\nurls.dart:\n\n    library urls;\n\n    final articleUrl = new UrlPattern(r'/articles/(\\d+)');\n\nserver.dart:\n\n    import 'urls.dart';\n    import 'package:route/server.dart';\n\n    main() {\n      var server = new HttpServer();\n      server.addRequestHandler(matchesUrl(articleUrl), serveArticle);\n    }\n\n    serveArcticle(req, res) {\n      var articleId = articleUrl.parse(req.path)[0];\n      // ...\n    }\n\nUse with older browsers\n-----------------------\n\nSince '#' matches both '#' and '/' it can be used in as a path separator\nbetween the \"static\" portion of your URL and the \"dynamic\" portion. The\ndynamic portion would be the part that change when a user navigates to new\ndata that's loaded dynamically rather than loading a new page.\n\nIn newer browsers that support `History.pushState()` an entire new path can\nbe pushed into the location bar without reloading the page. In older browsers\nonly the fragment can be changed without reloading the page. By matching both\ncharacters, and by producing either, we can use pushState in newer browsers,\nbut fall back to fragments when necessary.\n\nExamples:\n\n    var pattern = new UrlPattern(r'/app#profile/(\\d+)');\n    pattern.matches('/app/profile/1234'); // true\n    pattern.matches('/app#profile/1234'); // true\n    pattern.reverse([1234], useFragment: true); // /app#profile/1234\n    pattern.reverse([1234], useFragment: false); // /app/profile/1234\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"reverse","id":"reverse2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"args","id":"args"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"useFragment","id":"useFragment"}],"line":"93"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"parse","id":"parse1()","comment":"\nParses a URL path, or path + fragment, and returns the group matches.\nThrows [ArgumentError] if this pattern does not match [path].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"147"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches1()","comment":"\nReturns true if this pattern matches [path].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"162"},{"returnType":{"name":"Match","refId":"dart.core/Match"},"kind":"method","name":"matchAsPrefix","id":"matchAsPrefix2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"164"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_matches","id":"_matches2()","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"p","id":"p"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"isPrivate":true,"line":"168"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matchesNonFragment","id":"matchesNonFragment1()","comment":"\nReturns true if the path portion of the pattern, the part before the\nfragment, matches [str]. If there is no fragment in the pattern, this is\nequivalent to calling [matches].\n\nThis method is most useful on a server that is serving the HTML of a\nsingle page app. Clients that don't support pushState will not send the\nfragment to the server, so the server will have to handle just the path\npart.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"188"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"kind":"method","name":"allMatches","id":"allMatches1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"196"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"200"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"205"},{"kind":"method","name":"_parse","id":"_parse1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"pattern","id":"pattern"}],"isPrivate":true,"line":"207"},{"kind":"method","name":"_setBasePattern","id":"_setBasePattern1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"basePattern","id":"basePattern"}],"isPrivate":true,"line":"274"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"property","name":"regex","id":"regex","line":"91"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"203"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"pattern","id":"pattern","line":"82"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"variable","name":"_regex","id":"_regex","isPrivate":true,"line":"83"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_hasFragment","id":"_hasFragment","isPrivate":true,"line":"84"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"variable","name":"_baseRegex","id":"_baseRegex","isPrivate":true,"line":"85"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"pattern","refId":"route.url_pattern/UrlPattern/pattern"},"kind":"param","name":"pattern","id":"pattern"}],"line":"87"}],"line":"81"}],"uri":"file:///repo/akismet.dart/packages/route/url_pattern.dart","line":"5"}